---

# A special playbook responsible to build LXC containers described in containerListFile. This playbook is special, because it load in the inventory the containerListFile before launching the container creation. It is separated in 3 plays, because we use a special play to filter the containers to build a "targeted subset", and then build only desired containers in the last play.

- name: Load list of container
  hosts: controller
  run_once: yes

  tasks:
    - set_fact:
        infraConfig: "{{ lookup('file', containerListFile) | from_yaml }}"

    #- set_fact:
    #    infraGroups: "{{ infraConfig.groups }}"

    # Add .lxc suffix to all infra hosts
    - set_fact:
        infraHosts: "{{ infraHosts | default({}) | combine({(item.key | regex_replace('\\.lxc', '') + '.lxc'): item.value}) }}"
      with_dict: "{{ infraConfig.containers }}" 

    #- debug: var=limitSubset
    #- debug: var=infraHosts
    #- debug: var=infraGroups

    - name: List LXC containers
      #shell: "lxc-ls -1 | awk '{print $1 \".lxc\"}'"
      shell: "lxc-ls -1"
      register: result
      become: yes
      become_user: "{{ lxcUser }}"
      changed_when: no
      delegate_to: "{{ lxcMainHost }}"

    - name: Register lists of all existing CTs
      set_fact:
        allExistingCts: "{{ result.stdout_lines }}"
      delegate_to: localhost
      delegate_facts: True

    # By default container is in lxc group and in it's own group
    - name: Include infra hosts
      add_host:
        #name: "{{ item.key | regex_replace('\\.lxc$', '') }}.lxc"
        name: "{{ item.key }}"
        groups: "lxc,{{ envName }},{{ item.key | regex_replace('\\.lxc$', '') }},{{ item.value | join(',') }}"
        #groups: "lxc,{{ item.value | join(',') }}"
      with_dict: "{{ infraHosts }}"
      changed_when: no

    #- name: Include infra groups
    #  add_host:
    #    name: "{{ item.key }}"
    #    groups: "lxc,{{ item.value | join(',') }}"
    #  with_dict: "{{ infraGroups }}"
    #  changed_when: no


- name: Build target subset
  hosts: "{{ limitPattern | default ('all') }}"
  run_once: yes
  gather_facts: no
  ignore_errors: no
  any_errors_fatal: True

  tasks:
    #- debug: var=ansible_play_hosts

    - set_fact:
        targetedSubset: "{{ ansible_play_hosts | intersect(groups['lxc']) }}"
      delegate_to: localhost
      delegate_facts: True

    - name: Register lists of present and missing CTs
      set_fact:
        presentCts: "{{ hostvars['localhost'].targetedSubset | intersect(hostvars['localhost'].allExistingCts) }}"
        missingCts: "{{ hostvars['localhost'].targetedSubset | difference(hostvars['localhost'].allExistingCts) }}"
      delegate_to: localhost
      delegate_facts: True

    #- debug: var=hostvars['localhost'].targetedSubset
    #- debug: var=hostvars['localhost'].presentCts
    #- debug: var=hostvars['localhost'].missingCts


- name: Auto build LXC containers
  hosts: controller
  run_once: yes
  gather_facts: no
  ignore_errors: no
  any_errors_fatal: True

  tasks:
    # Due to a bug, include_role doesn't delegate_to handlers.
    # cf https://github.com/ansible/ansible/issues/26336
    #- name: Create not existing CTs
    #  include_role:
    #    name: lxc_container
    #  vars:
    #    distribName: "{{ hostvars[item].distribName }}"
    #    distribRelease: "{{ hostvars[item].distribRelease }}"
    #    ctName: "{{ item | regex_replace('\\.lxc$', '' ) }}"
    #    ctGroups: ""
    #    ctPortsMapping: ""
    #  #delegate_to: amipo1.dev
    #  with_items: "{{ missingCts }}"

    #- name: Build hostGroups map
    #  set_fact:
    #    hostGroups: "{{ hostGroups | default([]) + [ {'host': item, 'groups': hostvars[item]['group_names']} ] }}"
    #  with_items: "{{ targetedSubset }}"

    #- debug: var=hostGroups

    #- name: Build hostAllVars map
    #  set_fact:
    #    hostAllVars: "{{ hostAllVars | default({}) | combine({ item.0.host: (hostvars[item.0.host][item.1] | default({})) }, recursive= True) }}"
    #  with_subelements: 
    #    - "{{ hostGroups }}"
    #    - groups

    #- debug: var=hostvars

    # Call ansible-playbook instead of include_role to workaround the bug
    - name: Create not existing CTs
      shell: cd {{ ansibleHome }}; ansible-playbook {{ ansibleHome }}/no_prompt_create_lxc_container.yml --extra-vars "containerName={{ item | regex_replace('\.lxc$', '') }} containerGroups='{{ hostvars[item].group_names | to_yaml }}' distribName='{{ hostvars[item].distribName }}' distribRelease='{{ hostvars[item].distribRelease }}' portsMapping='{{ (hostvars[item].ctPortsMapping | default({})) | to_yaml }}' volumeRules='{{ (hostvars[item].ctVolumeRules | default({})) | to_yaml }}'"
      register: result
      with_items: "{{ hostvars['localhost'].missingCts }}"

    - debug: var=result
      when: hostvars['localhost'].missingCts | length > 0

    - name: Ensure CTs are started
      lxc_container:
        name: "{{ item | regex_replace('\\.lxc$', '' ) }}"
        state: started
      delegate_to: "{{ lxcMainHost }}"
      become: yes
      become_user: "{{lxcUser}}"
      with_items: "{{ hostvars['localhost'].presentCts }}"

    - name: Wait for port 22 to become open and contain "OpenSSH"
      wait_for:
        port: 22
        host: "{{ item | regex_replace('\\.lxc$', '') }}.lxc"
        search_regex: OpenSSH
        delay: 2
        timeout: 120
      with_items: "{{ hostvars['localhost'].presentCts + hostvars['localhost'].missingCts }}"

    - name: Refresh inventory
      meta: refresh_inventory


# vi: tabstop=2 expandtab shiftwidth=2 softtabstop=2

